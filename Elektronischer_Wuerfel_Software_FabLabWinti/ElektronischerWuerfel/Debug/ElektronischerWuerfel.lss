
ElektronischerWuerfel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000280  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080007c  0080007c  00000330  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000049a  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b4  00000000  00000000  000008be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c1  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00000e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025b  00000000  00000000  000011fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	0b c1       	rjmp	.+534    	; 0x21c <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e0 e8       	ldi	r30, 0x80	; 128
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	ac 37       	cpi	r26, 0x7C	; 124
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	ac e7       	ldi	r26, 0x7C	; 124
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a4 38       	cpi	r26, 0x84	; 132
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	55 d0       	rcall	.+170    	; 0xfc <main>
  52:	14 c1       	rjmp	.+552    	; 0x27c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <One>:
/* ---------------------------------------------- */
/*  Funktionen zur Anzeige der gewürfelten Zahlen */
/* ---------------------------------------------- */

void One(){
	PORTB = 0b00001011;
  56:	8b e0       	ldi	r24, 0x0B	; 11
  58:	88 bb       	out	0x18, r24	; 24
  5a:	08 95       	ret

0000005c <Two>:
};
void Two(){
	PORTB = 0b00001101;
  5c:	8d e0       	ldi	r24, 0x0D	; 13
  5e:	88 bb       	out	0x18, r24	; 24
  60:	08 95       	ret

00000062 <Three>:
};
void Three(){
	PORTB = 0b00001001;
  62:	89 e0       	ldi	r24, 0x09	; 9
  64:	88 bb       	out	0x18, r24	; 24
  66:	08 95       	ret

00000068 <Four>:
};
void Four(){
	PORTB = 0b00000101;
  68:	85 e0       	ldi	r24, 0x05	; 5
  6a:	88 bb       	out	0x18, r24	; 24
  6c:	08 95       	ret

0000006e <Five>:
};
void Five(){
	PORTB = 0b00000001;
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	88 bb       	out	0x18, r24	; 24
  72:	08 95       	ret

00000074 <Six>:
};
void Six(){
	PORTB = 0b00000100;
  74:	84 e0       	ldi	r24, 0x04	; 4
  76:	88 bb       	out	0x18, r24	; 24
  78:	08 95       	ret

0000007a <Pat1>:
};
void Pat1(){
	PORTB = 0b00001101;
  7a:	8d e0       	ldi	r24, 0x0D	; 13
  7c:	88 bb       	out	0x18, r24	; 24
  7e:	08 95       	ret

00000080 <Pat2>:
};
void Pat2(){
	PORTB = 0b00001110;
  80:	8e e0       	ldi	r24, 0x0E	; 14
  82:	88 bb       	out	0x18, r24	; 24
  84:	08 95       	ret

00000086 <Pat3>:
};
void Pat3(){
	PORTB = 0b00000111;
  86:	87 e0       	ldi	r24, 0x07	; 7
  88:	88 bb       	out	0x18, r24	; 24
  8a:	08 95       	ret

0000008c <setup>:
	NumFuncPTR ShowPattern[8] = {One,Six,LEDoff,LEDoff,One,Six,LEDoff,LEDoff};
#endif

void setup() {
	/* Ungenutzte Funktionen ausschalten -> Batterieverbrauch optimieren! */
	power_adc_disable();          // Analog/Digital-Wandler ausschalten
  8c:	80 b5       	in	r24, 0x20	; 32
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	80 bd       	out	0x20, r24	; 32
	power_usi_disable();          // Serielle Schnittstelle ausschalten
  92:	80 b5       	in	r24, 0x20	; 32
  94:	82 60       	ori	r24, 0x02	; 2
  96:	80 bd       	out	0x20, r24	; 32
	power_timer1_disable();       // Timer 1 ausschalten
  98:	80 b5       	in	r24, 0x20	; 32
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	80 bd       	out	0x20, r24	; 32
	
	/* Port B konfigurieren: 0 = input, 1 = output */
	DDRB |= (1 << led_A);
  9e:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1 << led_B);
  a0:	bb 9a       	sbi	0x17, 3	; 23
	DDRB |= (1 << led_C);
  a2:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= (1 << led_D);
  a4:	ba 9a       	sbi	0x17, 2	; 23
	DDRB &= ~(1 << buttonPin);
  a6:	bc 98       	cbi	0x17, 4	; 23
	
	/* Timeout-Variablen zurücksetzen */
	timeoutCnt_disp = 0;
  a8:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <timeoutCnt_disp+0x1>
  ac:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <timeoutCnt_disp>
	timeoutCnt_shuf = 0;
  b0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <timeoutCnt_shuf+0x1>
  b4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <timeoutCnt_shuf>
  b8:	08 95       	ret

000000ba <enterSleep>:
}


void enterSleep() {

	sbi(GIMSK,PCIE);                          // Pin-Change-Interrupt einschalten
  ba:	8b b7       	in	r24, 0x3b	; 59
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	8b bf       	out	0x3b, r24	; 59
	sbi(PCMSK,PCINT4);                        // Pin-Change-Eingang definieren (ATtiny: IC Pin3,PB4)
  c0:	ac 9a       	sbi	0x15, 4	; 21
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  c2:	85 b7       	in	r24, 0x35	; 53
  c4:	87 7e       	andi	r24, 0xE7	; 231
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	85 bf       	out	0x35, r24	; 53
	cli();
  ca:	f8 94       	cli
	sleep_enable();
  cc:	85 b7       	in	r24, 0x35	; 53
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	85 bf       	out	0x35, r24	; 53
	sleep_bod_disable();
  d2:	85 b7       	in	r24, 0x35	; 53
  d4:	84 68       	ori	r24, 0x84	; 132
  d6:	85 bf       	out	0x35, r24	; 53
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	85 bf       	out	0x35, r24	; 53
	sei();
  dc:	78 94       	sei
	sleep_cpu();
  de:	88 95       	sleep
	
	/* ------------------------------------------------------------------------------------------- */
	/* uC befindet sich im Sleep Mode. Nach dem Kippen des Würfels wird der Code hier fortgesetzt! */
	/* ------------------------------------------------------------------------------------------- */

	sleep_disable();
  e0:	85 b7       	in	r24, 0x35	; 53
  e2:	8f 7d       	andi	r24, 0xDF	; 223
  e4:	85 bf       	out	0x35, r24	; 53
	cli();
  e6:	f8 94       	cli
	
	/* Ungenutzte Funktionen ausschalten -> Batterieverbrauch optimieren! */
	power_adc_disable();
  e8:	80 b5       	in	r24, 0x20	; 32
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	80 bd       	out	0x20, r24	; 32
	power_usi_disable();
  ee:	80 b5       	in	r24, 0x20	; 32
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	80 bd       	out	0x20, r24	; 32
	power_timer1_disable();
  f4:	80 b5       	in	r24, 0x20	; 32
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	80 bd       	out	0x20, r24	; 32
  fa:	08 95       	ret

000000fc <main>:
}


int main(void) {
	
	setup();
  fc:	c7 df       	rcall	.-114    	; 0x8c <setup>
};
void Pat3(){
	PORTB = 0b00000111;
};
void LEDoff(){
	PORTB = 0b00001111;
  fe:	cf e0       	ldi	r28, 0x0F	; 15
	setup();
	
    while (1) {
	
		/* Einlesen des Kippschalters */
		buttonState = (PINB >> buttonPin) & 1;
 100:	86 b3       	in	r24, 0x16	; 22
 102:	82 95       	swap	r24
 104:	81 70       	andi	r24, 0x01	; 1
 106:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <buttonState>
	
		timeoutCnt_shuf = 0;
 10a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <timeoutCnt_shuf+0x1>
 10e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <timeoutCnt_shuf>
		
		/* Solange der Würfel gekippt wird, wird die folgende Schleife nicht verlassen: */
		while(buttonState == 0) {
 112:	53 c0       	rjmp	.+166    	; 0x1ba <main+0xbe>
			
			/* Aktuellen Zeitstempel in Variable speichern */
			timeoutCnt_disp = 0;
 114:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <timeoutCnt_disp+0x1>
 118:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <timeoutCnt_disp>
			
			/* Zeitverzögerung in ms, welche die Zählgeschwindigkeit regelt */
		
			timeoutCnt_shuf++;
 11c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <timeoutCnt_shuf>
 120:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <timeoutCnt_shuf+0x1>
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <timeoutCnt_shuf+0x1>
 12a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <timeoutCnt_shuf>
			
			/* Zählervariable um 1 erhöhen. Wenn sie 5 erreicht hat, wieder nullsetzen */
			if (dicecnt < 5) dicecnt++;
 12e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <dicecnt>
 132:	85 30       	cpi	r24, 0x05	; 5
 134:	30 f4       	brcc	.+12     	; 0x142 <main+0x46>
 136:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <dicecnt>
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <dicecnt>
 140:	02 c0       	rjmp	.+4      	; 0x146 <main+0x4a>
			else dicecnt = 0;
 142:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <dicecnt>
			
			/* Teiler / 73 */
			if (count < 73) count++;
 146:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 14a:	89 34       	cpi	r24, 0x49	; 73
 14c:	30 f4       	brcc	.+12     	; 0x15a <main+0x5e>
 14e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
 158:	0e c0       	rjmp	.+28     	; 0x176 <main+0x7a>
			else {
				count = 0;
 15a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
				if (dispcount < 7) dispcount++;
 15e:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <dispcount>
 162:	87 30       	cpi	r24, 0x07	; 7
 164:	30 f4       	brcc	.+12     	; 0x172 <main+0x76>
 166:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <dispcount>
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <dispcount>
 170:	02 c0       	rjmp	.+4      	; 0x176 <main+0x7a>
				else dispcount = 0;
 172:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <dispcount>
			}
			
			/* Zählmuster anzeigen */
			ShowPattern[dispcount]();
 176:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <dispcount>
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	e0 5a       	subi	r30, 0xA0	; 160
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	01 90       	ld	r0, Z+
 186:	f0 81       	ld	r31, Z
 188:	e0 2d       	mov	r30, r0
 18a:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	26 ea       	ldi	r18, 0xA6	; 166
 18e:	2a 95       	dec	r18
 190:	f1 f7       	brne	.-4      	; 0x18e <main+0x92>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x98>
};
void Pat3(){
	PORTB = 0b00000111;
};
void LEDoff(){
	PORTB = 0b00001111;
 194:	c8 bb       	out	0x18, r28	; 24
 196:	86 ea       	ldi	r24, 0xA6	; 166
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0x9c>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0xa2>
			_delay_ms(0.1*TIME_ON);
			LEDoff();
			_delay_ms(0.1*TIME_OFF);

			/* Einlesen des Kippschalters */
			buttonState = (PINB >> buttonPin) & 1;
 19e:	86 b3       	in	r24, 0x16	; 22
 1a0:	82 95       	swap	r24
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <buttonState>
			
			/* Nach einer bestimmten Zeit wird der Würfel abgeschaltet -> Batterieverbrauch! */
			if (timeoutCnt_shuf > TIMEOUT_SHUFFLE) {
 1a8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <timeoutCnt_shuf>
 1ac:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <timeoutCnt_shuf+0x1>
 1b0:	89 38       	cpi	r24, 0x89	; 137
 1b2:	93 41       	sbci	r25, 0x13	; 19
 1b4:	10 f0       	brcs	.+4      	; 0x1ba <main+0xbe>
};
void Pat3(){
	PORTB = 0b00000111;
};
void LEDoff(){
	PORTB = 0b00001111;
 1b6:	c8 bb       	out	0x18, r28	; 24
			buttonState = (PINB >> buttonPin) & 1;
			
			/* Nach einer bestimmten Zeit wird der Würfel abgeschaltet -> Batterieverbrauch! */
			if (timeoutCnt_shuf > TIMEOUT_SHUFFLE) {
				LEDoff();
				enterSleep();
 1b8:	80 df       	rcall	.-256    	; 0xba <enterSleep>
		buttonState = (PINB >> buttonPin) & 1;
	
		timeoutCnt_shuf = 0;
		
		/* Solange der Würfel gekippt wird, wird die folgende Schleife nicht verlassen: */
		while(buttonState == 0) {
 1ba:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <buttonState>
 1be:	88 23       	and	r24, r24
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <main+0xc8>
 1c2:	a8 cf       	rjmp	.-176    	; 0x114 <main+0x18>
			}

		}
		
		/* Gewürfelte Zahl mit den LED anzeigen */
		ShowNumber[dicecnt]();
 1c4:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <dicecnt>
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	ee 0f       	add	r30, r30
 1cc:	ff 1f       	adc	r31, r31
 1ce:	e0 59       	subi	r30, 0x90	; 144
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	01 90       	ld	r0, Z+
 1d4:	f0 81       	ld	r31, Z
 1d6:	e0 2d       	mov	r30, r0
 1d8:	09 95       	icall
 1da:	81 ee       	ldi	r24, 0xE1	; 225
 1dc:	94 e0       	ldi	r25, 0x04	; 4
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <main+0xe2>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0xe8>
 1e4:	00 00       	nop
};
void Pat3(){
	PORTB = 0b00000111;
};
void LEDoff(){
	PORTB = 0b00001111;
 1e6:	c8 bb       	out	0x18, r28	; 24
 1e8:	81 ee       	ldi	r24, 0xE1	; 225
 1ea:	94 e0       	ldi	r25, 0x04	; 4
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0xf0>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0xf6>
 1f2:	00 00       	nop
		/* LED's nur xx% der Zeit einschalten -> Batterieverbrauch optimieren */
		_delay_ms(TIME_ON);
		LEDoff();
		_delay_ms(TIME_OFF);
		/* Timeout-Variable inkrementieren */
		timeoutCnt_disp++;
 1f4:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <timeoutCnt_disp>
 1f8:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <timeoutCnt_disp+0x1>
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <timeoutCnt_disp+0x1>
 202:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <timeoutCnt_disp>
			
		/* Nach einer bestimmten Zeit wird der Würfel abgeschaltet -> Batterieverbrauch! */
		if (timeoutCnt_disp > TIMEOUT_DISPLAY){
 206:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <timeoutCnt_disp>
 20a:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <timeoutCnt_disp+0x1>
 20e:	85 3f       	cpi	r24, 0xF5	; 245
 210:	91 40       	sbci	r25, 0x01	; 1
 212:	08 f4       	brcc	.+2      	; 0x216 <main+0x11a>
 214:	75 cf       	rjmp	.-278    	; 0x100 <main+0x4>
};
void Pat3(){
	PORTB = 0b00000111;
};
void LEDoff(){
	PORTB = 0b00001111;
 216:	c8 bb       	out	0x18, r28	; 24
		timeoutCnt_disp++;
			
		/* Nach einer bestimmten Zeit wird der Würfel abgeschaltet -> Batterieverbrauch! */
		if (timeoutCnt_disp > TIMEOUT_DISPLAY){
			LEDoff();
			enterSleep();
 218:	50 df       	rcall	.-352    	; 0xba <enterSleep>
 21a:	72 cf       	rjmp	.-284    	; 0x100 <main+0x4>

0000021c <__vector_2>:
	power_timer1_disable();
}


/* Ist der Würfel im Sleep Mode und wird gekippt, so wird ein Interrupt mit dieser Interruptroutine ausgelöst */
ISR(PCINT0_vect) {
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	2f 93       	push	r18
 228:	3f 93       	push	r19
 22a:	4f 93       	push	r20
 22c:	5f 93       	push	r21
 22e:	6f 93       	push	r22
 230:	7f 93       	push	r23
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	af 93       	push	r26
 238:	bf 93       	push	r27
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
	unsigned char tempButtonState1 = (PINB >> buttonPin) & 1;
 23e:	96 b3       	in	r25, 0x16	; 22
 240:	e3 ed       	ldi	r30, 0xD3	; 211
 242:	f0 e3       	ldi	r31, 0x30	; 48
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <__vector_2+0x28>
 248:	00 c0       	rjmp	.+0      	; 0x24a <__vector_2+0x2e>
 24a:	00 00       	nop
	/* SW-Entprellung: 50ms (verhindert das Würfeln z.B. bei Vibrationen)*/
	_delay_ms(50);
	unsigned char tempButtonState2 = (PINB >> buttonPin) & 1;
 24c:	86 b3       	in	r24, 0x16	; 22
	if (tempButtonState1 != tempButtonState2) enterSleep();
 24e:	92 95       	swap	r25
 250:	91 70       	andi	r25, 0x01	; 1
 252:	82 95       	swap	r24
 254:	81 70       	andi	r24, 0x01	; 1
 256:	98 13       	cpse	r25, r24
 258:	30 df       	rcall	.-416    	; 0xba <enterSleep>
}
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	bf 91       	pop	r27
 260:	af 91       	pop	r26
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	7f 91       	pop	r23
 268:	6f 91       	pop	r22
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
